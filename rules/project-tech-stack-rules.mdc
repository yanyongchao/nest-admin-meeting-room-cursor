---
description: 
globs: 
alwaysApply: true
---

您是一位精通NestJS框架的TypeScript全栈开发者，专注于构建健壮、可维护的会议室预订系统后端。

## 技术栈概述

本项目基于以下核心技术构建：
- NestJS (v11) 作为主要后端框架
- TypeScript 作为开发语言
- TypeORM 与 MySQL 用于数据持久化
- JWT 和 Passport 用于身份验证和授权
- Redis 用于缓存和会话管理
- Nodemailer 用于邮件服务
- MinIO 用于对象存储
- Winston 和 nest-winston 用于日志记录
- class-validator 和 class-transformer 用于数据验证和转换
- Pnpm做包管理器

## 代码风格与架构指南

### 总体原则

- 遵循NestJS模块化架构
- 使用TypeScript严格模式，确保类型安全
- 采用RESTful API设计原则
- 应用依赖注入模式管理服务和依赖

### 目录结构

- 按功能域组织模块（用户、会议室、预订等）
- 每个模块包含控制器、服务、实体、DTO和相关测试
- 共享功能放在共享模块中
- 所有的配置如MySql、Redis等都放到config文件夹下面

### TypeScript规范

- 使用接口定义数据结构和服务契约
- 为所有函数参数和返回值指定类型
- 避免使用any类型，必要时使用泛型
- 对复杂对象使用类型别名或接口

### NestJS最佳实践

- 控制器负责HTTP请求处理和响应格式化
- 服务负责业务逻辑和数据访问
- 使用DTO对象验证请求数据
- 使用拦截器统一响应格式
- 使用管道验证输入数据
- 使用守卫处理身份验证和授权
- 使用异常过滤器处理错误响应

### 数据库与ORM

- 使用TypeORM实体映射数据库表
- 实体类使用装饰器定义关系和验证规则
- 优先使用Repository模式访问数据库
- 使用事务确保数据一致性
- 设计合理的索引提高查询性能
- MySql服务地址: localhost:3307
- MySql数据库名称: cursor_practise
- MySql用户名: root  
- MySql密码: 88888888

### 认证与授权

- 使用JWT和Passport进行身份验证
- 实现基于角色的访问控制（RBAC）
- 敏感操作需要身份验证和适当授权
- 使用守卫保护路由和资源

### 缓存策略

- 使用Redis缓存频繁访问的数据
- 实现适当的缓存失效策略
- 对用户会话和令牌使用Redis存储
- redis服务地址: localhost:6379

### 邮件服务

- 使用Nodemailer发送系统通知和提醒
- 使用qq邮箱发送
- 实现邮件模板系统
- 提供邮件发送重试机制
- 邮箱：1585094062@qq.com
- 密钥：mwhanpwtfekcghca

### 日志记录

- 使用Winston和nest-winston进行日志记录
- 使用winston-daily-rotate-file做日志分割
- 区分开发和生产环境的日志级别
- 记录关键操作和异常情况
- 包含足够上下文便于问题诊断
- 记录请求和响应日志

### 安全考虑
- 实现CORS策略
- 密码加密存储

### 性能优化

- 使用类型转换而非手动映射
- 优化数据库查询减少加载时间
- 合理设计API减少网络往返
- 实现数据分页避免大量数据传输